package driver

// Declare them in other file?
const N_FLOORS = 4
const N_BUTTONS = 4

// Replacing typedef enum from C-code
type elev_button_type_t int

const (

	BUTTON_CALL_UP elev_button_type_t = 0
   BUTTON_CALL_DOWN elev_button_type_t = 1
   BUTTON_COMMAND elev_button_type_t = 2

)

var lampChannelMatrix = [N_FLOORS][N_BUTTONS]int{

	{LIGHT_UP1, LIGHT_DOWN1, LIGHT_COMMAND1},
   {LIGHT_UP2, LIGHT_DOWN2, LIGHT_COMMAND2},
   {LIGHT_UP3, LIGHT_DOWN3, LIGHT_COMMAND3},
   {LIGHT_UP4, LIGHT_DOWN4, LIGHT_COMMAND4},

}


var buttonChannelMatrix = [N_FLOORS][N_BUTTONS]int{

	{FLOOR_UP1, FLOOR_DOWN1, FLOOR_COMMAND1},
	{FLOOR_UP2, FLOOR_DOWN2, FLOOR_COMMAND2},
	{FLOOR_UP3, FLOOR_DOWN3, FLOOR_COMMAND3},
	{FLOOR_UP4, FLOOR_DOWN4, FLOOR_COMMAND4},

}

/*
func elev_init() int {
	// Init hardware
	if !io_init() {
		return 0
	}
	
	// Zero all floor button lamps
	for i := 0; i < N_FLOORS; i++ {
		if i != 0 {
			elev_set_button_lamp(BUTTON_CALL_DOWN)
}
*/

/*

int elev_get_button_signal(elev_button_type_t button, int floor){
   // assert(floor >= 0);
    //assert(floor < N_FLOORS);
    //assert(!(button == BUTTON_CALL_UP && floor == N_FLOORS-1));
    //assert(!(button == BUTTON_CALL_DOWN && floor == 0));
    //assert( button == BUTTON_CALL_UP ||
     //       button == BUTTON_CALL_DOWN ||
     //       button == BUTTON_COMMAND);

    if (io_read_bit(button_channel_matrix[floor][button]))
        return 1;
    else
        return 0;
}


func elev_door_open() {
    io_set_bit(DOOR_OPEN)
}

func elev_door_close(){
   io_clear_bit(DOOR_OPEN)
}

func elev_door_check(){
   io_read_bit(DOOR_OPEN)
}

func elev_get_button(button int, floor int){ //ikke ferdig
   io_read_bit(button, )
}

func elev_get_stop_signal() int {
    return io_read_bit(STOP)
}

func elev_get_obstruction_signal () int {
    return io_read_bit(OBSTRUCTION);
}

func elev_set_speed(speed int){
   if speed > 0 {
      io_clear_bit(MOTORDIR)
   }
   else if speed < 0 {
      io_set_bit(MOTORDIR)
   }
   
   
   










func elev_get_floor_sensor_signal() int{
    if io_read_bit(SENSOR1)
        return 0
    else if (io_read_bit(SENSOR2))
        return 1
    else if (io_read_bit(SENSOR3))
        return 2
    else if (io_read_bit(SENSOR4))
        return 3
    else
        return -1
}

func elev_set_floor_light(){
   if elev_get_floor_sensor_signal() != -1{
      
   }


func elev_clear_light(floor int, dir OrderDirection) {
   switch {
      case floor == 1 && dir == ORDER_INTERNAL:
         Clear_bit(LIGHT_COMMAND1)
      case floor == 2 && dir == ORDER_INTERNAL:
         Clear_bit(LIGHT_COMMAND2)
      case floor == 3 && dir == ORDER_INTERNAL:
         Clear_bit(LIGHT_COMMAND3)
      case floor == 4 && dir == ORDER_INTERNAL:
         Clear_bit(LIGHT_COMMAND4)
      case floor == 1 && dir == ORDER_UP:
         Clear_bit(LIGHT_UP1)
      case floor == 2 && dir == ORDER_UP:
         Clear_bit(LIGHT_UP2)
      case floor == 3 && dir == ORDER_UP:
         Clear_bit(LIGHT_UP3)
      case floor == 2 && dir == ORDER_DOWN:
         Clear_bit(LIGHT_DOWN2)
      case floor == 3 && dir == ORDER_DOWN:
         Clear_bit(LIGHT_DOWN3)
      case floor == 4 && dir == ORDER_DOWN:
         Clear_bit(LIGHT_DOWN4)
   }
}
   
func elev_clear_all_lights() {
   ClearDoor()
   ClearStopButton()
   elev_clear_light(1, ORDER_UP)
   elev_clear_light(2, ORDER_UP)
   elev_clear_light(3, ORDER_UP)
   elev_clear_light(2, ORDER_DOWN)
   elev_clear_light(3, ORDER_DOWN)
   elev_clear_light(4, ORDER_DOWN)
   elev_clear_light(1, ORDER_INTERNAL)
   elev_clear_light(2, ORDER_INTERNAL)
   elev_clear_light(3, ORDER_INTERNAL)
   elev_clear_light(4, ORDER_INTERNAL)
}
   
*/
   
   

